#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright: (c) 2022, Ansible Project
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# template: header.j2
# This module is autogenerated by amazon_cloud_code_generator.
# See: https://github.com/ansible-collections/amazon_cloud_code_generator

from __future__ import absolute_import, division, print_function

__metaclass__ = type


DOCUMENTATION = r"""
module: ec2_subnet
short_description: Create and manage subnets in AWS virtual private clouds (VPCSs)
description: Create and manage subnets in AWS VPCs (list, create, update, describe,
    delete).
options:
    assign_ipv6_address_on_creation:
        type: bool
    availability_zone:
        type: str
    availability_zone_id:
        type: str
    cidr_block:
        type: str
    enable_dns64:
        type: bool
    ipv6_cidr_block:
        type: str
    ipv6_native:
        type: bool
    map_public_ip_on_launch:
        type: bool
    outpost_arn:
        type: str
    private_dns_name_options_on_launch:
        suboptions:
            enable_resource_name_dns_a_record:
                type: bool
            enable_resource_name_dns_aaaa_record:
                type: bool
            hostname_type:
                type: str
        type: dict
    state:
        choices:
        - create
        - update
        - delete
        - list
        - describe
        - get
        default: create
        description:
        - Goal state for resouirce.
        - I(state=create) creates the resouce.
        - I(state=update) updates the existing resouce.
        - I(state=delete) ensures an existing instance is deleted.
        - I(state=list) get all the existing resources.
        - I(state=describe) or I(state=get) retrieves information on an existing resource.
        type: str
    subnet_id:
        type: str
    tags:
        elements: dict
        suboptions:
            key:
                required: true
                type: str
            value:
                required: true
                type: str
        type: list
    vpc_id:
        required: true
        type: str
    wait:
        default: false
        description:
        - Wait for operation to complete before returning.
        type: bool
    wait_timeout:
        default: 320
        description:
        - How many seconds to wait for an operation to complete before timing out.
        type: int
author: Ansible Cloud Team (@ansible-collections)
version_added: TODO
requirements: []
"""

EXAMPLES = r"""
"""

RETURN = r"""
result:
    identifier:
        description: The unique identifier of the resource.
        type: str
    properties:
        description: The resource properties.
        type: complex
"""

import json

from ansible_collections.amazon.aws.plugins.module_utils.core import AnsibleAWSModule
from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    CloudControlResource,
)
from ansible_collections.amazon.cloud.plugins.module_utils.utils import (
    snake_dict_to_camel_dict,
)


def main():

    argument_spec = dict(
        client_token=dict(type="str", no_log=True),
        state=dict(
            type="str",
            choices=["create", "update", "delete", "list", "describe", "get"],
            default="create",
        ),
    )

    argument_spec["assign_ipv6_address_on_creation"] = {"type": "bool"}
    argument_spec["vpc_id"] = {"type": "str", "required": True}
    argument_spec["map_public_ip_on_launch"] = {"type": "bool"}
    argument_spec["availability_zone"] = {"type": "str"}
    argument_spec["availability_zone_id"] = {"type": "str"}
    argument_spec["cidr_block"] = {"type": "str"}
    argument_spec["subnet_id"] = {"type": "str"}
    argument_spec["ipv6_cidr_block"] = {"type": "str"}
    argument_spec["outpost_arn"] = {"type": "str"}
    argument_spec["ipv6_native"] = {"type": "bool"}
    argument_spec["enable_dns64"] = {"type": "bool"}
    argument_spec["private_dns_name_options_on_launch"] = {
        "type": "dict",
        "suboptions": {
            "hostname_type": {"type": "str"},
            "enable_resource_name_dns_a_record": {"type": "bool"},
            "enable_resource_name_dns_aaaa_record": {"type": "bool"},
        },
    }
    argument_spec["tags"] = {
        "type": "list",
        "elements": "dict",
        "suboptions": {
            "value": {"type": "str", "required": True},
            "key": {"type": "str", "required": True},
        },
    }
    argument_spec["state"] = {
        "type": "str",
        "choices": ["create", "update", "delete", "list", "describe", "get"],
        "default": "create",
    }
    argument_spec["wait"] = {"type": "bool", "default": False}
    argument_spec["wait_timeout"] = {"type": "int", "default": 320}

    required_if = [
        ["state", "create", ["subnet_id", "vpc_id"], True],
        ["state", "update", ["subnet_id"], True],
        ["state", "delete", ["subnet_id"], True],
        ["state", "get", ["subnet_id"], True],
    ]

    module = AnsibleAWSModule(
        argument_spec=argument_spec, required_if=required_if, supports_check_mode=True
    )
    cloud = CloudControlResource(module)

    type_name = "AWS::EC2::Subnet"

    params = {}

    params["assign_ipv6_address_on_creation"] = module.params.get(
        "assign_ipv6_address_on_creation"
    )
    params["availability_zone"] = module.params.get("availability_zone")
    params["availability_zone_id"] = module.params.get("availability_zone_id")
    params["cidr_block"] = module.params.get("cidr_block")
    params["enable_dns64"] = module.params.get("enable_dns64")
    params["ipv6_cidr_block"] = module.params.get("ipv6_cidr_block")
    params["ipv6_native"] = module.params.get("ipv6_native")
    params["map_public_ip_on_launch"] = module.params.get("map_public_ip_on_launch")
    params["outpost_arn"] = module.params.get("outpost_arn")
    params["private_dns_name_options_on_launch"] = module.params.get(
        "private_dns_name_options_on_launch"
    )
    params["subnet_id"] = module.params.get("subnet_id")
    params["tags"] = module.params.get("tags")
    params["vpc_id"] = module.params.get("vpc_id")

    # The DesiredState we pass to AWS must be a JSONArray of non-null values
    _params_to_set = {k: v for k, v in params.items() if v is not None}
    params_to_set = snake_dict_to_camel_dict(_params_to_set, capitalize_first=True)

    desired_state = json.dumps(params_to_set)
    state = module.params.get("state")
    identifier = module.params.get("subnet_id")

    results = {"changed": False, "result": []}

    if state == "list":
        results["result"] = cloud.list_resources(type_name)

    if state in ("describe", "get"):
        results["result"] = cloud.get_resource(type_name, identifier)

    if state == "create":
        results["changed"] |= cloud.create_resource(
            type_name, identifier, desired_state
        )
        results["result"] = cloud.get_resource(type_name, identifier)

    if state == "update":
        # Ignore createOnlyProperties that can be set only during resource creation
        create_only_params = [
            "/properties/VpcId",
            "/properties/AvailabilityZone",
            "/properties/AvailabilityZoneId",
            "/properties/CidrBlock",
            "/properties/OutpostArn",
            "/properties/Ipv6Native",
        ]
        results["changed"] |= cloud.update_resource(
            type_name, identifier, params_to_set, create_only_params
        )
        results["result"] = cloud.get_resource(type_name, identifier)

    if state == "delete":
        results["changed"] |= cloud.delete_resource(type_name, identifier)

    module.exit_json(**results)


if __name__ == "__main__":
    main()
