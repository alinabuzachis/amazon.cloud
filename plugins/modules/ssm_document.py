#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright: (c) 2022, Ansible Project
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# template: header.j2
# This module is autogenerated using the gouttelette generator tool
# See: https://github.com/ansible-collections/gouttelette


DOCUMENTATION = r"""
module: ssm_document
short_description: Creates and manages a Systems Manager (SSM) document
description:
- Creates and manages a Systems Manager (SSM) document in AWS Systems Manager.
- This document defines the actions that Systems Manager performs on your AWS resources.
options:
    attachments:
        description:
        - A list of key and value pairs that describe attachments to a version of
            a document.
        elements: dict
        suboptions:
            key:
                choices:
                - AttachmentReference
                - S3FileUrl
                - SourceUrl
                description:
                - The key of a key-value pair that identifies the location of an attachment
                    to a document.
                type: str
            name:
                description:
                - The name of the document attachment file.
                type: str
            values:
                description:
                - The value of a key-value pair that identifies the location of an
                    attachment to a document.
                - The format for Value depends on the type of key you specify.
                elements: str
                type: list
        type: list
    content:
        description:
        - The content for the Systems Manager document in JSON, YAML or String format.
        type: dict
    document_format:
        choices:
        - JSON
        - TEXT
        - YAML
        default: JSON
        description:
        - Specify the document format for the request.
        - The document format can be either JSON or YAML. JSON is the default format.
        type: str
    document_type:
        choices:
        - ApplicationConfiguration
        - ApplicationConfigurationSchema
        - Automation
        - Automation.ChangeTemplate
        - ChangeCalendar
        - CloudFormation
        - Command
        - DeploymentStrategy
        - Package
        - Policy
        - ProblemAnalysis
        - ProblemAnalysisTemplate
        - Session
        description:
        - The type of document to create.
        type: str
    force:
        default: false
        description:
        - Cancel IN_PROGRESS and PENDING resource requestes.
        - Because you can only perform a single operation on a given resource at a
            time, there might be cases where you need to cancel the current resource
            operation to make the resource available so that another operation may
            be performed on it.
        type: bool
    name:
        description:
        - A name for the Systems Manager document.
        type: str
    purge_tags:
        default: true
        description:
        - Remove tags not listed in I(tags).
        type: bool
    requires:
        description:
        - A list of SSM documents required by a document.
        - For example, an ApplicationConfiguration document requires an ApplicationConfigurationSchema
            document.
        elements: dict
        suboptions:
            name:
                description:
                - The name of the required SSM document.
                - The name can be an Amazon Resource Name (ARN).
                type: str
            version:
                description:
                - The document version required by the current document.
                type: str
        type: list
    state:
        choices:
        - present
        - absent
        - list
        - describe
        - get
        default: present
        description:
        - Goal state for resource.
        - I(state=present) creates the resource if it doesn't exist, or updates to
            the provided state if the resource already exists.
        - I(state=absent) ensures an existing instance is deleted.
        - I(state=list) get all the existing resources.
        - I(state=describe) or I(state=get) retrieves information on an existing resource.
        type: str
    tags:
        aliases:
        - resource_tags
        description:
        - A dict of tags to apply to the resource.
        - To remove all tags set I(tags={}) and I(purge_tags=true).
        type: dict
    target_type:
        description:
        - Specify a target type to define the kinds of resources the document can
            run on.
        type: str
    update_method:
        choices:
        - NewVersion
        - Replace
        default: Replace
        description:
        - Update method - when set to Replace, the update will replace the existing
            document; when set to NewVersion, the update will create a new version.
        type: str
    version_name:
        description:
        - An optional field specifying the version of the artifact you are creating
            with the document.
        - This value is unique across all versions of a document, and cannot be changed.
        type: str
    wait:
        default: false
        description:
        - Wait for operation to complete before returning.
        type: bool
    wait_timeout:
        default: 320
        description:
        - How many seconds to wait for an operation to complete before timing out.
        type: int
author: Ansible Cloud Team (@ansible-collections)
version_added: 0.3.0
extends_documentation_fragment:
- amazon.aws.aws
- amazon.aws.ec2
- amazon.cloud.boto3
"""

EXAMPLES = r"""
"""

RETURN = r"""
result:
    description:
        - When I(state=list), it is a list containing dictionaries of resource information.
        - Otherwise, it is a dictionary of resource information.
        - When I(state=absent), it is an empty dictionary.
    returned: always
    type: complex
    contains:
        identifier:
            description: The unique identifier of the resource.
            type: str
        properties:
            description: The resource properties.
            type: dict
"""

import json

from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    AnsibleAmazonCloudModule,
)
from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    CloudControlResource,
)
from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    snake_dict_to_camel_dict,
)
from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    ansible_dict_to_boto3_tag_list,
)


def main():

    argument_spec = dict(
        state=dict(
            type="str",
            choices=["present", "absent", "list", "describe", "get"],
            default="present",
        ),
    )

    argument_spec["content"] = {"type": "dict"}
    argument_spec["attachments"] = {
        "type": "list",
        "elements": "dict",
        "options": {
            "key": {
                "type": "str",
                "choices": ["AttachmentReference", "S3FileUrl", "SourceUrl"],
            },
            "values": {"type": "list", "elements": "str"},
            "name": {"type": "str"},
        },
    }
    argument_spec["name"] = {"type": "str"}
    argument_spec["version_name"] = {"type": "str"}
    argument_spec["document_type"] = {
        "type": "str",
        "choices": [
            "ApplicationConfiguration",
            "ApplicationConfigurationSchema",
            "Automation",
            "Automation.ChangeTemplate",
            "ChangeCalendar",
            "CloudFormation",
            "Command",
            "DeploymentStrategy",
            "Package",
            "Policy",
            "ProblemAnalysis",
            "ProblemAnalysisTemplate",
            "Session",
        ],
    }
    argument_spec["document_format"] = {
        "type": "str",
        "default": "JSON",
        "choices": ["JSON", "TEXT", "YAML"],
    }
    argument_spec["target_type"] = {"type": "str"}
    argument_spec["tags"] = {"type": "dict", "aliases": ["resource_tags"]}
    argument_spec["requires"] = {
        "type": "list",
        "elements": "dict",
        "options": {"name": {"type": "str"}, "version": {"type": "str"}},
    }
    argument_spec["update_method"] = {
        "type": "str",
        "default": "Replace",
        "choices": ["NewVersion", "Replace"],
    }
    argument_spec["state"] = {
        "type": "str",
        "choices": ["present", "absent", "list", "describe", "get"],
        "default": "present",
    }
    argument_spec["wait"] = {"type": "bool", "default": False}
    argument_spec["wait_timeout"] = {"type": "int", "default": 320}
    argument_spec["force"] = {"type": "bool", "default": False}
    argument_spec["purge_tags"] = {"type": "bool", "default": True}

    required_if = [
        ["state", "present", ["name", "content"], True],
        ["state", "absent", ["name"], True],
        ["state", "get", ["name"], True],
    ]
    mutually_exclusive = []

    module = AnsibleAmazonCloudModule(
        argument_spec=argument_spec,
        required_if=required_if,
        mutually_exclusive=mutually_exclusive,
        supports_check_mode=True,
    )
    cloud = CloudControlResource(module)

    type_name = "AWS::SSM::Document"

    params = {}

    params["attachments"] = module.params.get("attachments")
    params["content"] = module.params.get("content")
    params["document_format"] = module.params.get("document_format")
    params["document_type"] = module.params.get("document_type")
    params["name"] = module.params.get("name")
    params["requires"] = module.params.get("requires")
    params["tags"] = module.params.get("tags")
    params["target_type"] = module.params.get("target_type")
    params["update_method"] = module.params.get("update_method")
    params["version_name"] = module.params.get("version_name")

    # The DesiredState we pass to AWS must be a JSONArray of non-null values
    _params_to_set = {k: v for k, v in params.items() if v is not None}

    # Only if resource is taggable
    if module.params.get("tags") is not None:
        _params_to_set["tags"] = ansible_dict_to_boto3_tag_list(module.params["tags"])

    params_to_set = snake_dict_to_camel_dict(_params_to_set, capitalize_first=True)

    # Ignore createOnlyProperties that can be set only during resource creation
    create_only_params = ["name", "document_type"]

    # Necessary to handle when module does not support all the states
    handlers = ["create", "read", "update", "delete", "list"]

    state = module.params.get("state")
    identifier = ["name"]

    results = {"changed": False, "result": {}}

    if state == "list":
        if "list" not in handlers:
            module.exit_json(
                **results, msg=f"Resource type {type_name} cannot be listed."
            )
        results["result"] = cloud.list_resources(type_name, identifier)

    if state in ("describe", "get"):
        if "read" not in handlers:
            module.exit_json(
                **results, msg=f"Resource type {type_name} cannot be read."
            )
        results["result"] = cloud.get_resource(type_name, identifier)

    if state == "present":
        results = cloud.present(
            type_name, identifier, params_to_set, create_only_params
        )

    if state == "absent":
        results["changed"] |= cloud.absent(type_name, identifier)

    module.exit_json(**results)


if __name__ == "__main__":
    main()
