#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright: (c) 2022, Ansible Project
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# template: header.j2
# This module is autogenerated by amazon_cloud_code_generator.
# See: https://github.com/ansible-collections/amazon_cloud_code_generator

from __future__ import absolute_import, division, print_function

__metaclass__ = type


DOCUMENTATION = r"""
module: ec2_instance
short_description: Create and manage EC2 instances
description: Manage EC2 instances (list, create, update, describe, delete).
options:
    additional_info:
        type: str
    affinity:
        type: str
    availability_zone:
        type: str
    block_device_mappings:
        elements: dict
        suboptions:
            device_name:
                required: true
                type: str
            ebs:
                suboptions:
                    delete_on_termination:
                        type: bool
                    encrypted:
                        type: bool
                    iops:
                        type: int
                    kms_key_id:
                        type: str
                    snapshot_id:
                        type: str
                    volume_size:
                        type: int
                    volume_type:
                        type: str
                type: dict
            no_device:
                type: dict
            virtual_name:
                type: str
        type: list
    cpu_options:
        suboptions:
            core_count:
                type: int
            threads_per_core:
                type: int
        type: dict
    credit_specification:
        suboptions:
            cpu_credits:
                type: str
        type: dict
    disable_api_termination:
        type: bool
    ebs_optimized:
        type: bool
    elastic_gpu_specifications:
        elements: dict
        suboptions:
            type:
                required: true
                type: str
        type: list
    elastic_inference_accelerators:
        elements: dict
        suboptions:
            count:
                type: int
            type:
                required: true
                type: str
        type: list
    enclave_options:
        suboptions:
            enabled:
                type: bool
        type: dict
    hibernation_options:
        suboptions:
            configured:
                type: bool
        type: dict
    host_id:
        type: str
    host_resource_group_arn:
        type: str
    iam_instance_profile:
        type: str
    id:
        type: str
    image_id:
        type: str
    instance_initiated_shutdown_behavior:
        type: str
    instance_type:
        type: str
    ipv6_address_count:
        type: int
    ipv6_addresses:
        elements: dict
        suboptions:
            ipv6_address:
                required: true
                type: str
        type: list
    kernel_id:
        type: str
    key_name:
        type: str
    launch_template:
        suboptions:
            launch_template_id:
                type: str
            launch_template_name:
                type: str
            version:
                required: true
                type: str
        type: dict
    license_specifications:
        elements: dict
        suboptions:
            license_configuration_arn:
                required: true
                type: str
        type: list
    monitoring:
        type: bool
    network_interfaces:
        elements: dict
        suboptions:
            associate_public_ip_address:
                type: bool
            delete_on_termination:
                type: bool
            description:
                type: str
            device_index:
                required: true
                type: str
            group_set:
                elements: str
                type: list
            ipv6_address_count:
                type: int
            ipv6_addresses:
                elements: dict
                suboptions:
                    ipv6_address:
                        required: true
                        type: str
                type: list
            network_interface_id:
                type: str
            private_ip_address:
                type: str
            private_ip_addresses:
                elements: dict
                suboptions:
                    primary:
                        required: true
                        type: bool
                    private_ip_address:
                        required: true
                        type: str
                type: list
            secondary_private_ip_address_count:
                type: int
            subnet_id:
                type: str
        type: list
    placement_group_name:
        type: str
    private_dns_name:
        type: str
    private_dns_name_options:
        suboptions:
            enable_resource_name_dns_a_record:
                type: bool
            enable_resource_name_dns_aaaa_record:
                type: bool
            hostname_type:
                type: str
        type: dict
    private_ip:
        type: str
    private_ip_address:
        type: str
    propagate_tags_to_volume_on_creation:
        type: bool
    public_dns_name:
        type: str
    public_ip:
        type: str
    ramdisk_id:
        type: str
    security_group_ids:
        elements: str
        type: list
    security_groups:
        elements: str
        type: list
    source_dest_check:
        type: bool
    ssm_associations:
        elements: dict
        suboptions:
            association_parameters:
                elements: dict
                suboptions:
                    key:
                        required: true
                        type: str
                    value:
                        elements: str
                        required: true
                        type: list
                type: list
            document_name:
                required: true
                type: str
        type: list
    state:
        choices:
        - create
        - update
        - delete
        - list
        - describe
        - get
        default: create
        description:
        - Goal state for resouirce.
        - I(state=create) creates the resouce.
        - I(state=update) updates the existing resouce.
        - I(state=delete) ensures an existing instance is deleted.
        - I(state=list) get all the existing resources.
        - I(state=describe) or I(state=get) retrieves information on an existing resource.
        type: str
    subnet_id:
        type: str
    tags:
        elements: dict
        suboptions:
            key:
                required: true
                type: str
            value:
                required: true
                type: str
        type: list
    tenancy:
        type: str
    user_data:
        type: str
    volumes:
        elements: dict
        suboptions:
            device:
                required: true
                type: str
            volume_id:
                required: true
                type: str
        type: list
    wait:
        default: false
        description:
        - Wait for operation to complete before returning.
        type: bool
    wait_timeout:
        default: 320
        description:
        - How many seconds to wait for an operation to complete before timing out.
        type: int
author: Ansible Cloud Team (@ansible-collections)
version_added: TODO
requirements: []
"""

EXAMPLES = r"""
"""

RETURN = r"""
result:
    identifier:
        description: The unique identifier of the resource.
        type: str
    properties:
        description: The resource properties 
        type: complex
"""

import json

from ansible_collections.amazon.aws.plugins.module_utils.core import AnsibleAWSModule
from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    CloudControlResource,
)
from ansible_collections.amazon.cloud.plugins.module_utils.utils import (
    snake_dict_to_camel_dict,
)


def main():

    argument_spec = dict(
        client_token=dict(type="str", no_log=True),
        state=dict(
            type="str",
            choices=["create", "update", "delete", "list", "describe", "get"],
            default="create",
        ),
    )

    argument_spec["tenancy"] = {"type": "str"}
    argument_spec["security_groups"] = {"type": "list", "elements": "str"}
    argument_spec["private_dns_name"] = {"type": "str"}
    argument_spec["private_ip_address"] = {"type": "str"}
    argument_spec["user_data"] = {"type": "str"}
    argument_spec["block_device_mappings"] = {
        "type": "list",
        "elements": "dict",
        "suboptions": {
            "no_device": {"type": "dict"},
            "virtual_name": {"type": "str"},
            "ebs": {
                "type": "dict",
                "suboptions": {
                    "snapshot_id": {"type": "str"},
                    "volume_type": {"type": "str"},
                    "kms_key_id": {"type": "str"},
                    "encrypted": {"type": "bool"},
                    "iops": {"type": "int"},
                    "volume_size": {"type": "int"},
                    "delete_on_termination": {"type": "bool"},
                },
            },
            "device_name": {"type": "str", "required": True},
        },
    }
    argument_spec["iam_instance_profile"] = {"type": "str"}
    argument_spec["ipv6_addresses"] = {
        "type": "list",
        "elements": "dict",
        "suboptions": {"ipv6_address": {"type": "str", "required": True}},
    }
    argument_spec["kernel_id"] = {"type": "str"}
    argument_spec["subnet_id"] = {"type": "str"}
    argument_spec["ebs_optimized"] = {"type": "bool"}
    argument_spec["propagate_tags_to_volume_on_creation"] = {"type": "bool"}
    argument_spec["elastic_gpu_specifications"] = {
        "type": "list",
        "elements": "dict",
        "suboptions": {"type": {"type": "str", "required": True}},
    }
    argument_spec["elastic_inference_accelerators"] = {
        "type": "list",
        "elements": "dict",
        "suboptions": {
            "type": {"type": "str", "required": True},
            "count": {"type": "int"},
        },
    }
    argument_spec["volumes"] = {
        "type": "list",
        "elements": "dict",
        "suboptions": {
            "volume_id": {"type": "str", "required": True},
            "device": {"type": "str", "required": True},
        },
    }
    argument_spec["private_ip"] = {"type": "str"}
    argument_spec["ipv6_address_count"] = {"type": "int"}
    argument_spec["launch_template"] = {
        "type": "dict",
        "suboptions": {
            "launch_template_name": {"type": "str"},
            "launch_template_id": {"type": "str"},
            "version": {"type": "str", "required": True},
        },
    }
    argument_spec["enclave_options"] = {
        "type": "dict",
        "suboptions": {"enabled": {"type": "bool"}},
    }
    argument_spec["network_interfaces"] = {
        "type": "list",
        "elements": "dict",
        "suboptions": {
            "private_ip_address": {"type": "str"},
            "private_ip_addresses": {
                "type": "list",
                "elements": "dict",
                "suboptions": {
                    "private_ip_address": {"type": "str", "required": True},
                    "primary": {"type": "bool", "required": True},
                },
            },
            "secondary_private_ip_address_count": {"type": "int"},
            "device_index": {"type": "str", "required": True},
            "group_set": {"type": "list", "elements": "str"},
            "ipv6_addresses": {
                "type": "list",
                "elements": "dict",
                "suboptions": {"ipv6_address": {"type": "str", "required": True}},
            },
            "subnet_id": {"type": "str"},
            "associate_public_ip_address": {"type": "bool"},
            "network_interface_id": {"type": "str"},
            "ipv6_address_count": {"type": "int"},
            "delete_on_termination": {"type": "bool"},
        },
    }
    argument_spec["image_id"] = {"type": "str"}
    argument_spec["instance_type"] = {"type": "str"}
    argument_spec["monitoring"] = {"type": "bool"}
    argument_spec["tags"] = {
        "type": "list",
        "elements": "dict",
        "suboptions": {
            "value": {"type": "str", "required": True},
            "key": {"type": "str", "required": True},
        },
    }
    argument_spec["additional_info"] = {"type": "str"}
    argument_spec["hibernation_options"] = {
        "type": "dict",
        "suboptions": {"configured": {"type": "bool"}},
    }
    argument_spec["license_specifications"] = {
        "type": "list",
        "elements": "dict",
        "suboptions": {"license_configuration_arn": {"type": "str", "required": True}},
    }
    argument_spec["public_ip"] = {"type": "str"}
    argument_spec["instance_initiated_shutdown_behavior"] = {"type": "str"}
    argument_spec["cpu_options"] = {
        "type": "dict",
        "suboptions": {
            "threads_per_core": {"type": "int"},
            "core_count": {"type": "int"},
        },
    }
    argument_spec["availability_zone"] = {"type": "str"}
    argument_spec["private_dns_name_options"] = {
        "type": "dict",
        "suboptions": {
            "hostname_type": {"type": "str"},
            "enable_resource_name_dns_aaaa_record": {"type": "bool"},
            "enable_resource_name_dns_a_record": {"type": "bool"},
        },
    }
    argument_spec["host_id"] = {"type": "str"}
    argument_spec["host_resource_group_arn"] = {"type": "str"}
    argument_spec["public_dns_name"] = {"type": "str"}
    argument_spec["security_group_ids"] = {"type": "list", "elements": "str"}
    argument_spec["disable_api_termination"] = {"type": "bool"}
    argument_spec["key_name"] = {"type": "str"}
    argument_spec["ramdisk_id"] = {"type": "str"}
    argument_spec["source_dest_check"] = {"type": "bool"}
    argument_spec["placement_group_name"] = {"type": "str"}
    argument_spec["ssm_associations"] = {
        "type": "list",
        "elements": "dict",
        "suboptions": {
            "association_parameters": {
                "type": "list",
                "elements": "dict",
                "suboptions": {
                    "value": {"type": "list", "required": True, "elements": "str"},
                    "key": {"type": "str", "required": True},
                },
            },
            "document_name": {"type": "str", "required": True},
        },
    }
    argument_spec["affinity"] = {"type": "str"}
    argument_spec["id"] = {"type": "str"}
    argument_spec["credit_specification"] = {
        "type": "dict",
        "suboptions": {"cpu_credits": {"type": "str"}},
    }
    argument_spec["state"] = {
        "type": "str",
        "choices": ["create", "update", "delete", "list", "describe", "get"],
        "default": "create",
    }
    argument_spec["wait"] = {"type": "bool", "default": False}
    argument_spec["wait_timeout"] = {"type": "int", "default": 320}

    required_if = [
        ["state", "update", ["id"], True],
        ["state", "delete", ["id"], True],
        ["state", "get", ["id"], True],
    ]

    module = AnsibleAWSModule(
        argument_spec=argument_spec, required_if=required_if, supports_check_mode=True
    )
    cloud = CloudControlResource(module)

    type_name = "AWS::EC2::Instance"

    params = {}

    params["private_ip"] = module.params.get("private_ip")
    params["id"] = module.params.get("id")
    params["launch_template"] = module.params.get("launch_template")
    params["source_dest_check"] = module.params.get("source_dest_check")
    params["kernel_id"] = module.params.get("kernel_id")
    params["network_interfaces"] = module.params.get("network_interfaces")
    params["disable_api_termination"] = module.params.get("disable_api_termination")
    params["tags"] = module.params.get("tags")
    params["additional_info"] = module.params.get("additional_info")
    params["private_dns_name"] = module.params.get("private_dns_name")
    params["cpu_options"] = module.params.get("cpu_options")
    params["placement_group_name"] = module.params.get("placement_group_name")
    params["propagate_tags_to_volume_on_creation"] = module.params.get(
        "propagate_tags_to_volume_on_creation"
    )
    params["subnet_id"] = module.params.get("subnet_id")
    params["monitoring"] = module.params.get("monitoring")
    params["availability_zone"] = module.params.get("availability_zone")
    params["license_specifications"] = module.params.get("license_specifications")
    params["host_id"] = module.params.get("host_id")
    params["ramdisk_id"] = module.params.get("ramdisk_id")
    params["security_groups"] = module.params.get("security_groups")
    params["affinity"] = module.params.get("affinity")
    params["key_name"] = module.params.get("key_name")
    params["ipv6_address_count"] = module.params.get("ipv6_address_count")
    params["ssm_associations"] = module.params.get("ssm_associations")
    params["ipv6_addresses"] = module.params.get("ipv6_addresses")
    params["credit_specification"] = module.params.get("credit_specification")
    params["host_resource_group_arn"] = module.params.get("host_resource_group_arn")
    params["instance_type"] = module.params.get("instance_type")
    params["enclave_options"] = module.params.get("enclave_options")
    params["elastic_inference_accelerators"] = module.params.get(
        "elastic_inference_accelerators"
    )
    params["security_group_ids"] = module.params.get("security_group_ids")
    params["public_dns_name"] = module.params.get("public_dns_name")
    params["ebs_optimized"] = module.params.get("ebs_optimized")
    params["user_data"] = module.params.get("user_data")
    params["image_id"] = module.params.get("image_id")
    params["iam_instance_profile"] = module.params.get("iam_instance_profile")
    params["tenancy"] = module.params.get("tenancy")
    params["volumes"] = module.params.get("volumes")
    params["block_device_mappings"] = module.params.get("block_device_mappings")
    params["elastic_gpu_specifications"] = module.params.get(
        "elastic_gpu_specifications"
    )
    params["public_ip"] = module.params.get("public_ip")
    params["private_dns_name_options"] = module.params.get("private_dns_name_options")
    params["private_ip_address"] = module.params.get("private_ip_address")
    params["hibernation_options"] = module.params.get("hibernation_options")
    params["instance_initiated_shutdown_behavior"] = module.params.get(
        "instance_initiated_shutdown_behavior"
    )

    # The DesiredState we pass to AWS must be a JSONArray of non-null values
    _params_to_set = {k: v for k, v in params.items() if v is not None}
    params_to_set = snake_dict_to_camel_dict(_params_to_set, capitalize_first=True)

    desired_state = json.dumps(params_to_set)
    state = module.params.get("state")
    identifier = module.params.get("id")

    results = {"changed": False, "result": []}

    if state == "list":
        results["result"] = cloud.list_resources(type_name)

    if state == ("describe", "get"):
        results["result"] = cloud.get_resource(type_name, identifier)

    if state == "create":
        results["changed"] |= cloud.create_resource(
            type_name, identifier, desired_state
        )
        results["result"] = cloud.get_resource(type_name, identifier)

    if state == "update":
        results["changed"] |= cloud.update_resource(
            type_name, identifier, params_to_set
        )
        results["result"] = cloud.get_resource(type_name, identifier)

    if state == "delete":
        results["changed"] |= cloud.delete_resource(type_name, identifier)

    module.exit_json(**results)


if __name__ == "__main__":
    main()
