#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright: (c) 2022, Ansible Project
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# template: header.j2
# This module is autogenerated using the gouttelette generator tool
# See: https://github.com/ansible-collections/gouttelette


DOCUMENTATION = r"""
module: wafv2_ip_set
short_description: Creates and manages and IP set
description:
- Creates and manages and IP set to identify web requests that originate from specific
    IP addresses or ranges of IP addresses.
- For example, if you're receiving a lot of requests from a ranges of IP addresses,
    you can configure AWS WAF to block them using an IP set that lists those IP addresses.
- For more information see U(https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafv2-ipset.html).
options:
    addresses:
        description:
        - IP address.
        elements: str
        type: list
    description:
        description:
        - Description of the entity.
        type: str
    force:
        default: false
        description:
        - Cancel IN_PROGRESS and PENDING resource requestes.
        - Because you can only perform a single operation on a given resource at a
            time, there might be cases where you need to cancel the current resource
            operation to make the resource available so that another operation may
            be performed on it.
        type: bool
    id:
        description:
        - Id of the IPSet.
        type: str
    identifier:
        description:
        - For compound primary identifiers, to specify the primary identifier as a
            string, list each in the order that they are specified in the identifier
            list definition, separated by '|'.
        - For more details, visit U(https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-identifier.html).
        type: str
    ip_address_version:
        choices:
        - IPV4
        - IPV6
        description:
        - Type of addresses in the IPSet, use C(IPV4) for C(IPV4) IP addresses, C(IPV6)
            for C(IPV6) address.
        type: str
    name:
        description:
        - Name of the IPSet.
        type: str
    purge_tags:
        default: true
        description:
        - Remove tags not listed in I(tags).
        type: bool
    scope:
        choices:
        - CLOUDFRONT
        - REGIONAL
        description:
        - Use C(CLOUDFRONT) for CloudFront IPSet, use C(REGIONAL) for Application
            Load Balancer and API Gateway.
        type: str
    state:
        choices:
        - present
        - absent
        - list
        - describe
        - get
        default: present
        description:
        - Goal state for resource.
        - I(state=present) creates the resource if it doesn't exist, or updates to
            the provided state if the resource already exists.
        - I(state=absent) ensures an existing instance is deleted.
        - I(state=list) get all the existing resources.
        - I(state=describe) or I(state=get) retrieves information on an existing resource.
        type: str
    tags:
        aliases:
        - resource_tags
        description:
        - A dict of tags to apply to the resource.
        - To remove all tags set I(tags={}) and I(purge_tags=true).
        type: dict
    wait:
        default: false
        description:
        - Wait for operation to complete before returning.
        type: bool
    wait_timeout:
        default: 320
        description:
        - How many seconds to wait for an operation to complete before timing out.
        type: int
author: Ansible Cloud Team (@ansible-collections)
version_added: 0.3.0
extends_documentation_fragment:
- amazon.aws.aws
- amazon.aws.ec2
- amazon.cloud.boto3
"""

EXAMPLES = r"""
"""

RETURN = r"""
result:
    description:
        - When I(state=list), it is a list containing dictionaries of resource information.
        - Otherwise, it is a dictionary of resource information.
        - When I(state=absent), it is an empty dictionary.
    returned: always
    type: complex
    contains:
        identifier:
            description: The unique identifier of the resource.
            type: str
        properties:
            description: The resource properties.
            type: dict
"""

import json

from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    AnsibleAmazonCloudModule,
)
from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    CloudControlResource,
)
from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    snake_dict_to_camel_dict,
)
from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    ansible_dict_to_boto3_tag_list,
)


def main():

    argument_spec = dict(
        state=dict(
            type="str",
            choices=["present", "absent", "list", "describe", "get"],
            default="present",
        ),
    )

    argument_spec["description"] = {"type": "str"}
    argument_spec["name"] = {"type": "str"}
    argument_spec["id"] = {"type": "str"}
    argument_spec["scope"] = {"type": "str", "choices": ["CLOUDFRONT", "REGIONAL"]}
    argument_spec["ip_address_version"] = {"type": "str", "choices": ["IPV4", "IPV6"]}
    argument_spec["addresses"] = {"type": "list", "elements": "str"}
    argument_spec["tags"] = {"type": "dict", "aliases": ["resource_tags"]}
    argument_spec["state"] = {
        "type": "str",
        "choices": ["present", "absent", "list", "describe", "get"],
        "default": "present",
    }
    argument_spec["wait"] = {"type": "bool", "default": False}
    argument_spec["wait_timeout"] = {"type": "int", "default": 320}
    argument_spec["force"] = {"type": "bool", "default": False}
    argument_spec["purge_tags"] = {"type": "bool", "default": True}
    argument_spec["identifier"] = {"type": "str"}

    required_if = [
        ["state", "list", ["name", "id"], True],
        [
            "state",
            "present",
            ["addresses", "identifier", "scope", "id", "ip_address_version", "name"],
            True,
        ],
        ["state", "absent", ["name", "id", "scope", "identifier"], True],
        ["state", "get", ["name", "id", "scope", "identifier"], True],
    ]
    mutually_exclusive = [[("name", "id", "scope"), "identifier"]]

    module = AnsibleAmazonCloudModule(
        argument_spec=argument_spec,
        required_if=required_if,
        mutually_exclusive=mutually_exclusive,
        supports_check_mode=True,
    )
    cloud = CloudControlResource(module)

    type_name = "AWS::WAFv2::IPSet"

    params = {}

    params["addresses"] = module.params.get("addresses")
    params["description"] = module.params.get("description")
    params["id"] = module.params.get("id")
    params["identifier"] = module.params.get("identifier")
    params["ip_address_version"] = module.params.get("ip_address_version")
    params["name"] = module.params.get("name")
    params["scope"] = module.params.get("scope")
    params["tags"] = module.params.get("tags")

    # The DesiredState we pass to AWS must be a JSONArray of non-null values
    _params_to_set = {k: v for k, v in params.items() if v is not None}

    # Only if resource is taggable
    if module.params.get("tags") is not None:
        _params_to_set["tags"] = ansible_dict_to_boto3_tag_list(module.params["tags"])

    params_to_set = snake_dict_to_camel_dict(_params_to_set, capitalize_first=True)

    # Ignore createOnlyProperties that can be set only during resource creation
    create_only_params = ["name", "scope"]

    # Necessary to handle when module does not support all the states
    handlers = ["create", "delete", "read", "update", "list"]

    state = module.params.get("state")
    identifier = ["name", "id", "scope"]
    if (
        state in ("present", "absent", "get", "describe")
        and module.params.get("identifier") is None
    ):
        if (
            not module.params.get("name")
            or not module.params.get("id")
            or not module.params.get("scope")
        ):
            module.fail_json(f"You must specify both {*identifier, } identifiers.")

    results = {"changed": False, "result": {}}

    if state == "list":
        if "list" not in handlers:
            module.exit_json(
                **results, msg=f"Resource type {type_name} cannot be listed."
            )
        results["result"] = cloud.list_resources(type_name, identifier)

    if state in ("describe", "get"):
        if "read" not in handlers:
            module.exit_json(
                **results, msg=f"Resource type {type_name} cannot be read."
            )
        results["result"] = cloud.get_resource(type_name, identifier)

    if state == "present":
        results = cloud.present(
            type_name, identifier, params_to_set, create_only_params
        )

    if state == "absent":
        results["changed"] |= cloud.absent(type_name, identifier)

    module.exit_json(**results)


if __name__ == "__main__":
    main()
