#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright: (c) 2022, Ansible Project
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# template: header.j2
# This module is autogenerated by amazon_cloud_code_generator.
# See: https://github.com/ansible-collections/amazon_cloud_code_generator

from __future__ import absolute_import, division, print_function

__metaclass__ = type


DOCUMENTATION = r"""
module: iam_role
short_description: Create and manage EC2 instances
description: Manage EC2 instances (list, create, update, describe, delete).
options:
    arn:
        description:
        - The Amazon Resource Name (ARN) for the role.
        type: str
    assume_role_policy_document:
        description:
        - The trust policy that is associated with this role.
        required: true
        type:
        - object
        - string
    description:
        description:
        - A description of the role that you provide.
        type: str
    managed_policy_arns:
        description:
        - A list of Amazon Resource Names (ARNs) of the IAM managed policies that
            you want to attach to the role.
        elements: str
        type: list
    max_session_duration:
        description:
        - The maximum session duration (in seconds) that you want to set for the specified
            role.
        - If you do not specify a value for this setting, the default maximum of one
            hour is applied.
        - This setting can have a value from 1 hour to 12 hours.
        maximum: 43200
        minimum: 3600
        type: int
    path:
        description:
        - The path to the role.
        type: str
    permissions_boundary:
        description:
        - The ARN of the policy used to set the permissions boundary for the role.
        type: str
    policies:
        description:
        - The inline policy document that is embedded in the specified IAM role.
        elements: dict
        suboptions:
            policy_document:
                description:
                - The policy document.
                required: true
                type:
                - string
                - object
            policy_name:
                description:
                - The friendly name (not ARN) identifying the policy.
                required: true
                type: str
        type: list
    role_id:
        description:
        - The stable and unique string identifying the role.
        type: str
    role_name:
        description:
        - A name for the IAM role, up to 64 characters in length.
        type: str
    state:
        choices:
        - create
        - update
        - delete
        - list
        - describe
        - get
        default: create
        description:
        - Goal state for resouirce.
        - I(state=create) creates the resouce.
        - I(state=update) updates the existing resouce.
        - I(state=delete) ensures an existing instance is deleted.
        - I(state=list) get all the existing resources.
        - I(state=describe) or I(state=get) retrieves information on an existing resource.
        type: str
    tags:
        description:
        - A key-value pair to associate with a resource.
        elements: dict
        suboptions:
            key:
                description:
                - The key name of the tag.
                - You can specify a value that is 1 to 128 Unicode characters in length
                    and cannot be prefixed with aws:.
                - 'You can use any of the following characters: the set of Unicode
                    letters, digits, whitespace, _, ., /, =, +, and -.'
                required: true
                type: str
            value:
                description:
                - The value for the tag.
                - You can specify a value that is 0 to 256 Unicode characters in length
                    and cannot be prefixed with aws:.
                - 'You can use any of the following characters: the set of Unicode
                    letters, digits, whitespace, _, ., /, =, +, and -.'
                required: true
                type: str
        type: list
    wait:
        default: false
        description:
        - Wait for operation to complete before returning.
        type: bool
    wait_timeout:
        default: 320
        description:
        - How many seconds to wait for an operation to complete before timing out.
        type: int
author: Ansible Cloud Team (@ansible-collections)
version_added: TODO
requirements: []
"""

EXAMPLES = r"""
"""

RETURN = r"""
result:
    identifier:
        description: The unique identifier of the resource.
        type: str
    properties:
        description: The resource properties.
        type: complex
"""

import json

from ansible_collections.amazon.aws.plugins.module_utils.core import AnsibleAWSModule
from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    CloudControlResource,
)
from ansible_collections.amazon.cloud.plugins.module_utils.utils import (
    snake_dict_to_camel_dict,
)


def main():

    argument_spec = dict(
        client_token=dict(type="str", no_log=True),
        state=dict(
            type="str",
            choices=["create", "update", "delete", "list", "describe", "get"],
            default="create",
        ),
    )

    argument_spec["arn"] = {"type": "str"}
    argument_spec["assume_role_policy_document"] = {
        "type": ["object", "string"],
        "required": True,
    }
    argument_spec["description"] = {"type": "str"}
    argument_spec["managed_policy_arns"] = {"type": "list", "elements": "str"}
    argument_spec["max_session_duration"] = {
        "type": "int",
        "minimum": 3600,
        "maximum": 43200,
    }
    argument_spec["path"] = {"type": "str"}
    argument_spec["permissions_boundary"] = {"type": "str"}
    argument_spec["policies"] = {
        "type": "list",
        "elements": "dict",
        "suboptions": {
            "policy_document": {"type": ["string", "object"], "required": True},
            "policy_name": {"type": "str", "required": True},
        },
    }
    argument_spec["role_id"] = {"type": "str"}
    argument_spec["role_name"] = {"type": "str"}
    argument_spec["tags"] = {
        "type": "list",
        "elements": "dict",
        "suboptions": {
            "key": {"type": "str", "required": True},
            "value": {"type": "str", "required": True},
        },
    }
    argument_spec["state"] = {
        "type": "str",
        "choices": ["create", "update", "delete", "list", "describe", "get"],
        "default": "create",
    }
    argument_spec["wait"] = {"type": "bool", "default": False}
    argument_spec["wait_timeout"] = {"type": "int", "default": 320}

    required_if = [
        ["state", "create", ["role_name", "assume_role_policy_document"], True],
        ["state", "update", ["role_name"], True],
        ["state", "delete", ["role_name"], True],
        ["state", "get", ["role_name"], True],
    ]

    module = AnsibleAWSModule(
        argument_spec=argument_spec, required_if=required_if, supports_check_mode=True
    )
    cloud = CloudControlResource(module)

    type_name = "AWS::IAM::Role"

    params = {}

    params["path"] = module.params.get("path")
    params["arn"] = module.params.get("arn")
    params["managed_policy_arns"] = module.params.get("managed_policy_arns")
    params["assume_role_policy_document"] = module.params.get(
        "assume_role_policy_document"
    )
    params["policies"] = module.params.get("policies")
    params["description"] = module.params.get("description")
    params["role_name"] = module.params.get("role_name")
    params["tags"] = module.params.get("tags")
    params["max_session_duration"] = module.params.get("max_session_duration")
    params["permissions_boundary"] = module.params.get("permissions_boundary")
    params["role_id"] = module.params.get("role_id")

    # The DesiredState we pass to AWS must be a JSONArray of non-null values
    _params_to_set = {k: v for k, v in params.items() if v is not None}
    params_to_set = snake_dict_to_camel_dict(_params_to_set, capitalize_first=True)

    desired_state = json.dumps(params_to_set)
    state = module.params.get("state")
    identifier = module.params.get("role_name")

    results = {"changed": False, "result": []}

    if state == "list":
        results["result"] = cloud.list_resources(type_name)

    if state == ("describe", "get"):
        results["result"] = cloud.get_resource(type_name, identifier)

    if state == "create":
        results["changed"] |= cloud.create_resource(
            type_name, identifier, desired_state
        )
        results["result"] = cloud.get_resource(type_name, identifier)

    if state == "update":
        results["changed"] |= cloud.update_resource(
            type_name, identifier, params_to_set
        )
        results["result"] = cloud.get_resource(type_name, identifier)

    if state == "delete":
        results["changed"] |= cloud.delete_resource(type_name, identifier)

    module.exit_json(**results)


if __name__ == "__main__":
    main()
