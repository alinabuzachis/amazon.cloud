#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright: (c) 2022, Ansible Project
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# template: header.j2
# This module is autogenerated using the ansible.content_builder.
# See: https://github.com/ansible-community/ansible.content_builder


DOCUMENTATION = r"""
module: rds_db_cluster
short_description: Creates and manages an Amazon Aurora DB cluster or Multi-AZ DB
    cluster
description:
- Creates and manages an Amazon Aurora DB cluster or Multi-AZ DB cluster. For more
    information, see U(https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbcluster.html)
options:
    allocated_storage:
        aliases:
        - AllocatedStorage
        description:
        - The amount of storage in gibibytes (GiB) to allocate to each DB instance
            in the Multi-AZ DB cluster.
        type: int
    associated_roles:
        aliases:
        - AssociatedRoles
        description:
        - Describes an AWS Identity and Access Management (IAM) role that is associated
            with a DB cluster.
        elements: dict
        suboptions:
            feature_name:
                aliases:
                - FeatureName
                description:
                - The name of the feature associated with the AWS Identity and Access
                    Management (IAM) role.
                - For the list of supported feature names, see DBEngineVersion in
                    the Amazon RDS API Reference.
                type: str
            role_arn:
                aliases:
                - RoleArn
                description:
                - The Amazon Resource Name (ARN) of the IAM role that is associated
                    with the DB cluster.
                type: str
        type: list
    auto_minor_version_upgrade:
        aliases:
        - AutoMinorVersionUpgrade
        description:
        - A value that indicates whether minor engine upgrades are applied automatically
            to the DB cluster during the maintenance window.
        - By default, minor engine upgrades are applied automatically.
        type: bool
    availability_zones:
        aliases:
        - AvailabilityZones
        description:
        - A list of Availability Zones (AZs) where instances in the DB cluster can
            be created.
        - For information on AWS Regions and Availability Zones, see Choosing the
            Regions and Availability Zones in the Amazon Aurora User Guide.
        elements: str
        type: list
    backtrack_window:
        aliases:
        - BacktrackWindow
        default: 0
        description:
        - The target backtrack window, in seconds.
        - To disable backtracking, set this value to 0.
        type: int
    backup_retention_period:
        aliases:
        - BackupRetentionPeriod
        default: 1
        description:
        - The number of days for which automated backups are retained.
        type: int
    copy_tags_to_snapshot:
        aliases:
        - CopyTagsToSnapshot
        description:
        - A value that indicates whether to copy all tags from the DB cluster to snapshots
            of the DB cluster.
        - The default is not to copy them.
        type: bool
    database_name:
        aliases:
        - DatabaseName
        description:
        - The name of your database.
        - If you dont provide a name, then Amazon RDS wont create a database in this
            DB cluster.
        - For naming constraints, see Naming Constraints in the Amazon RDS User Guide.
        type: str
    db_cluster_identifier:
        aliases:
        - DBClusterIdentifier
        description:
        - The DB cluster identifier.
        - This parameter is stored as a lowercase string.
        type: str
    db_cluster_instance_class:
        aliases:
        - DBClusterInstanceClass
        description:
        - The compute and memory capacity of each DB instance in the Multi-AZ DB cluster,
            for example db.m6g.xlarge.
        type: str
    db_cluster_parameter_group_name:
        aliases:
        - DBClusterParameterGroupName
        default: default.aurora5.6
        description:
        - The name of the DB cluster parameter group to associate with this DB cluster.
        type: str
    db_instance_parameter_group_name:
        aliases:
        - DBInstanceParameterGroupName
        description:
        - The name of the DB parameter group to apply to all instances of the DB cluster.
        type: str
    db_subnet_group_name:
        aliases:
        - DBSubnetGroupName
        description:
        - A DB subnet group that you want to associate with this DB cluster.
        type: str
    db_system_id:
        aliases:
        - DBSystemId
        description:
        - Reserved for future use.
        type: str
    deletion_protection:
        aliases:
        - DeletionProtection
        description:
        - A value that indicates whether the DB cluster has deletion protection enabled.
        - The database cant be deleted when deletion protection is enabled.
        - By default, deletion protection is disabled.
        type: bool
    domain:
        aliases:
        - Domain
        description:
        - The Active Directory directory ID to create the DB cluster in.
        type: str
    domain_iam_role_name:
        aliases:
        - DomainIAMRoleName
        description:
        - Specify the name of the IAM role to be used when making API calls to the
            Directory Service.
        type: str
    enable_cloudwatch_logs_exports:
        aliases:
        - EnableCloudwatchLogsExports
        description:
        - The list of log types that need to be enabled for exporting to CloudWatch
            Logs.
        - The values in the list depend on the DB engine being used.
        - For more information, see Publishing Database Logs to Amazon CloudWatch
            Logs in the Amazon Aurora User Guide.
        elements: str
        type: list
    enable_http_endpoint:
        aliases:
        - EnableHttpEndpoint
        description:
        - A value that indicates whether to enable the HTTP endpoint for an Aurora
            Serverless DB cluster.
        - By default, the HTTP endpoint is disabled.
        type: bool
    enable_iam_database_authentication:
        aliases:
        - EnableIAMDatabaseAuthentication
        description:
        - A value that indicates whether to enable mapping of AWS Identity and Access
            Management (IAM) accounts to database accounts.
        - By default, mapping is disabled.
        type: bool
    engine:
        aliases:
        - Engine
        description:
        - The name of the database engine to be used for this DB cluster.
        - 'Valid Values: aurora (for MySQL 5.6-compatible Aurora), aurora-mysql (for
            MySQL 5.7-compatible Aurora), and aurora-postgresql.'
        type: str
    engine_mode:
        aliases:
        - EngineMode
        description:
        - The DB engine mode of the DB cluster, either provisioned, serverless, parallelquery,
            global, or multimaster.
        type: str
    engine_version:
        aliases:
        - EngineVersion
        description:
        - The version number of the database engine to use.
        type: str
    force:
        default: false
        description:
        - Cancel IN_PROGRESS and PENDING resource requestes.
        - Because you can only perform a single operation on a given resource at a
            time, there might be cases where you need to cancel the current resource
            operation to make the resource available so that another operation may
            be performed on it.
        type: bool
    global_cluster_identifier:
        aliases:
        - GlobalClusterIdentifier
        description:
        - If you are configuring an Aurora global database cluster and want your Aurora
            DB cluster to be a secondary member in the global database cluster, specify
            the global cluster ID of the global database cluster.
        - To define the primary database cluster of the global cluster, use the AWS::RDS::GlobalCluster
            resource.
        - If you arent configuring a global database cluster, dont specify this property.
        type: str
    iops:
        aliases:
        - Iops
        description:
        - The amount of Provisioned IOPS (input/output operations per second) to be
            initially allocated for each DB instance in the Multi-AZ DB cluster.
        type: int
    kms_key_id:
        aliases:
        - KmsKeyId
        description:
        - The Amazon Resource Name (ARN) of the AWS Key Management Service master
            key that is used to encrypt the database instances in the DB cluster,
            such as arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.
        - If you enable the StorageEncrypted property but dont specify this property,
            the default master key is used.
        - If you specify this property, you must set the StorageEncrypted property
            to true.
        type: str
    manage_master_user_password:
        aliases:
        - ManageMasterUserPassword
        description:
        - A value that indicates whether to manage the master user password with AWS
            Secrets Manager.
        type: bool
    master_user_password:
        aliases:
        - MasterUserPassword
        description:
        - The master password for the DB instance.
        type: str
    master_username:
        aliases:
        - MasterUsername
        description:
        - The name of the master user for the DB cluster.
        - You must specify MasterUsername, unless you specify SnapshotIdentifier.
        - In that case, dont specify MasterUsername.
        type: str
    monitoring_interval:
        aliases:
        - MonitoringInterval
        default: 0
        description:
        - The interval, in seconds, between points when Enhanced Monitoring metrics
            are collected for the DB cluster.
        - To turn off collecting Enhanced Monitoring metrics, specify 0.
        - The default is 0.
        type: int
    monitoring_role_arn:
        aliases:
        - MonitoringRoleArn
        description:
        - The Amazon Resource Name (ARN) for the IAM role that permits RDS to send
            Enhanced Monitoring metrics to Amazon CloudWatch Logs.
        type: str
    network_type:
        aliases:
        - NetworkType
        description:
        - The network type of the DB cluster.
        type: str
    performance_insights_enabled:
        aliases:
        - PerformanceInsightsEnabled
        description:
        - A value that indicates whether to turn on Performance Insights for the DB
            cluster.
        type: bool
    performance_insights_kms_key_id:
        aliases:
        - PerformanceInsightsKmsKeyId
        description:
        - The Amazon Web Services KMS key identifier for encryption of Performance
            Insights data.
        type: str
    performance_insights_retention_period:
        aliases:
        - PerformanceInsightsRetentionPeriod
        description:
        - The amount of time, in days, to retain Performance Insights data.
        type: int
    port:
        aliases:
        - Port
        description:
        - The port number on which the instances in the DB cluster accept connections.
        - 'Default: 3306 if engine is set as aurora or 5432 if set to aurora-postgresql.'
        type: int
    preferred_backup_window:
        aliases:
        - PreferredBackupWindow
        description:
        - The daily time range during which automated backups are created if automated
            backups are enabled using the BackupRetentionPeriod parameter.
        - The default is a 30-minute window selected at random from an 8-hour block
            of time for each AWS Region.
        - To see the time blocks available, see Adjusting the Preferred DB Cluster
            Maintenance Window in the Amazon Aurora User Guide.
        type: str
    preferred_maintenance_window:
        aliases:
        - PreferredMaintenanceWindow
        description:
        - The weekly time range during which system maintenance can occur, in Universal
            Coordinated Time (UTC). The default is a 30-minute window selected at
            random from an 8-hour block of time for each AWS Region, occurring on
            a random day of the week.
        - To see the time blocks available, see Adjusting the Preferred DB Cluster
            Maintenance Window in the Amazon Aurora User Guide.
        type: str
    publicly_accessible:
        aliases:
        - PubliclyAccessible
        description:
        - A value that indicates whether the DB cluster is publicly accessible.
        type: bool
    purge_tags:
        default: true
        description:
        - Remove tags not listed in I(tags).
        type: bool
    replication_source_identifier:
        aliases:
        - ReplicationSourceIdentifier
        description:
        - The Amazon Resource Name (ARN) of the source DB instance or DB cluster if
            this DB cluster is created as a Read Replica.
        type: str
    restore_to_time:
        aliases:
        - RestoreToTime
        description:
        - The date and time to restore the DB cluster to.
        - Value must be a time in Universal Coordinated Time (UTC) format.
        - 'An example: 2015-03-07C(T23):45:00Z.'
        type: str
    restore_type:
        aliases:
        - RestoreType
        default: full-copy
        description:
        - The type of restore to be performed.
        - You can specify one of the following values:.
        - full-copy - The new DB cluster is restored as a full copy of the source
            DB cluster.
        - copy-on-write - The new DB cluster is restored as a clone of the source
            DB cluster.
        type: str
    scaling_configuration:
        aliases:
        - ScalingConfiguration
        description:
        - The I(scaling_configuration) property type specifies the scaling configuration
            of an Aurora Serverless DB cluster.The I(scaling_configuration) property
            type specifies the scaling configuration of an Aurora Serverless DB cluster.
        suboptions:
            auto_pause:
                aliases:
                - AutoPause
                description:
                - A value that indicates whether to allow or disallow automatic pause
                    for an Aurora DB cluster in serverless DB engine mode.
                - A DB cluster can be paused only when its idle (it has no connections).
                type: bool
            max_capacity:
                aliases:
                - MaxCapacity
                description:
                - The maximum capacity for an Aurora DB cluster in serverless DB engine
                    mode.
                - For Aurora MySQL, valid capacity values are 1, 2, 4, 8, 16, 32,
                    64, 128, and 256.
                - For Aurora PostgreSQL, valid capacity values are 2, 4, 8, 16, 32,
                    64, 192, and 384.
                - The maximum capacity must be greater than or equal to the minimum
                    capacity.
                type: int
            min_capacity:
                aliases:
                - MinCapacity
                description:
                - The minimum capacity for an Aurora DB cluster in serverless DB engine
                    mode.
                - For Aurora MySQL, valid capacity values are 1, 2, 4, 8, 16, 32,
                    64, 128, and 256.
                - For Aurora PostgreSQL, valid capacity values are 2, 4, 8, 16, 32,
                    64, 192, and 384.
                - The minimum capacity must be less than or equal to the maximum capacity.
                type: int
            seconds_before_timeout:
                aliases:
                - SecondsBeforeTimeout
                description:
                - The amount of time, in seconds, that Aurora Serverless v1 tries
                    to find a scaling point to perform seamless scaling before enforcing
                    the timeout action.
                - The default is 300.
                type: int
            seconds_until_auto_pause:
                aliases:
                - SecondsUntilAutoPause
                description:
                - The time, in seconds, before an Aurora DB cluster in serverless
                    mode is paused.
                type: int
            timeout_action:
                aliases:
                - TimeoutAction
                description:
                - The action to take when the timeout is reached, either ForceApplyCapacityChange
                    or RollbackCapacityChange.
                - ForceApplyCapacityChange sets the capacity to the specified value
                    as soon as possible.
                - RollbackCapacityChange, the default, ignores the capacity change
                    if a scaling point isnt found in the timeout period.
                - For more information, see Autoscaling for Aurora Serverless v1 in
                    the Amazon Aurora User Guide.
                type: str
        type: dict
    serverless_v2_scaling_configuration:
        aliases:
        - ServerlessV2ScalingConfiguration
        description:
        - Contains the scaling configuration of an Aurora Serverless v2 DB cluster.Contains
            the scaling configuration of an Aurora Serverless v2 DB cluster.
        suboptions:
            max_capacity:
                aliases:
                - MaxCapacity
                description:
                - The maximum number of Aurora capacity units (ACUs) for a DB instance
                    in an Aurora Serverless v2 cluster.
                - You can specify ACU values in half-step increments, such as 40,
                    40.5, 41, and so on.
                - The largest value that you can use is 128.
                type: int
            min_capacity:
                aliases:
                - MinCapacity
                description:
                - The minimum number of Aurora capacity units (ACUs) for a DB instance
                    in an Aurora Serverless v2 cluster.
                - You can specify ACU values in half-step increments, such as 8, 8.5,
                    9, and so on.
                - The smallest value that you can use is 0.5.
                type: int
        type: dict
    snapshot_identifier:
        aliases:
        - SnapshotIdentifier
        description:
        - The identifier for the DB snapshot or DB cluster snapshot to restore from.
        - You can use either the name or the Amazon Resource Name (ARN) to specify
            a DB cluster snapshot.
        - However, you can use only the ARN to specify a DB snapshot.
        - After you restore a DB cluster with a SnapshotIdentifier property, you must
            specify the same SnapshotIdentifier property for any future updates to
            the DB cluster.
        - When you specify this property for an update, the DB cluster is not restored
            from the snapshot again, and the data in the database is not changed.
        - However, if you dont specify the SnapshotIdentifier property, an empty DB
            cluster is created, and the original DB cluster is deleted.
        - If you specify a property that is different from the previous snapshot restore
            property, the DB cluster is restored from the specified SnapshotIdentifier
            property, and the original DB cluster is deleted.
        type: str
    source_db_cluster_identifier:
        aliases:
        - SourceDBClusterIdentifier
        description:
        - The identifier of the source DB cluster from which to restore.
        type: str
    source_region:
        aliases:
        - SourceRegion
        description:
        - The AWS Region which contains the source DB cluster when replicating a DB
            cluster.
        - For example, us-east-1.
        type: str
    state:
        choices:
        - present
        - absent
        - list
        - describe
        - get
        default: present
        description:
        - Goal state for resource.
        - I(state=present) creates the resource if it doesn't exist, or updates to
            the provided state if the resource already exists.
        - I(state=absent) ensures an existing instance is deleted.
        - I(state=list) get all the existing resources.
        - I(state=describe) or I(state=get) retrieves information on an existing resource.
        type: str
    storage_encrypted:
        aliases:
        - StorageEncrypted
        description:
        - Indicates whether the DB instance is encrypted.
        - If you specify the DBClusterIdentifier, SnapshotIdentifier, or SourceDBInstanceIdentifier
            property, dont specify this property.
        - The value is inherited from the cluster, snapshot, or source DB instance.
        type: bool
    storage_type:
        aliases:
        - StorageType
        description:
        - Specifies the storage type to be associated with the DB cluster.
        type: str
    tags:
        aliases:
        - Tags
        - resource_tags
        description:
        - A dict of tags to apply to the resource.
        - To remove all tags set I(tags={}) and I(purge_tags=true).
        type: dict
    use_latest_restorable_time:
        aliases:
        - UseLatestRestorableTime
        description:
        - A value that indicates whether to restore the DB cluster to the latest restorable
            backup time.
        - By default, the DB cluster is not restored to the latest restorable backup
            time.
        type: bool
    vpc_security_group_ids:
        aliases:
        - VpcSecurityGroupIds
        description:
        - A list of EC2 VPC security groups to associate with this DB cluster.
        elements: str
        type: list
    wait:
        default: false
        description:
        - Wait for operation to complete before returning.
        type: bool
    wait_timeout:
        default: 320
        description:
        - How many seconds to wait for an operation to complete before timing out.
        type: int
author: Ansible Cloud Team (@ansible-collections)
version_added: 0.3.0
extends_documentation_fragment:
- amazon.aws.aws
- amazon.aws.ec2
- amazon.cloud.boto3
"""

EXAMPLES = r"""
"""

RETURN = r"""
result:
    description:
        - When I(state=list), it is a list containing dictionaries of resource information.
        - Otherwise, it is a dictionary of resource information.
        - When I(state=absent), it is an empty dictionary.
    returned: always
    type: complex
    contains:
        identifier:
            description: The unique identifier of the resource.
            type: str
        properties:
            description: The resource properties.
            type: dict
"""


from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    AnsibleAmazonCloudModule,
)
from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    CloudControlResource,
)
from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    ansible_dict_to_boto3_tag_list,
)
from ansible_collections.amazon.cloud.plugins.module_utils.core import (
    scrub_none_parameters,
)
from ansible_collections.amazon.cloud.plugins.module_utils.core import map_key_to_alias


def main():
    argument_spec = dict(
        state=dict(
            type="str",
            choices=["present", "absent", "list", "describe", "get"],
            default="present",
        ),
    )

    argument_spec["allocated_storage"] = {
        "type": "int",
        "aliases": ["AllocatedStorage"],
    }
    argument_spec["associated_roles"] = {
        "type": "list",
        "elements": "dict",
        "options": {
            "feature_name": {"type": "str", "aliases": ["FeatureName"]},
            "role_arn": {"type": "str", "aliases": ["RoleArn"]},
        },
        "aliases": ["AssociatedRoles"],
    }
    argument_spec["availability_zones"] = {
        "type": "list",
        "elements": "str",
        "aliases": ["AvailabilityZones"],
    }
    argument_spec["auto_minor_version_upgrade"] = {
        "type": "bool",
        "aliases": ["AutoMinorVersionUpgrade"],
    }
    argument_spec["backtrack_window"] = {
        "default": 0,
        "type": "int",
        "aliases": ["BacktrackWindow"],
    }
    argument_spec["backup_retention_period"] = {
        "default": 1,
        "type": "int",
        "aliases": ["BackupRetentionPeriod"],
    }
    argument_spec["copy_tags_to_snapshot"] = {
        "type": "bool",
        "aliases": ["CopyTagsToSnapshot"],
    }
    argument_spec["database_name"] = {"type": "str", "aliases": ["DatabaseName"]}
    argument_spec["db_cluster_instance_class"] = {
        "type": "str",
        "aliases": ["DBClusterInstanceClass"],
    }
    argument_spec["db_instance_parameter_group_name"] = {
        "type": "str",
        "aliases": ["DBInstanceParameterGroupName"],
    }
    argument_spec["db_system_id"] = {"type": "str", "aliases": ["DBSystemId"]}
    argument_spec["global_cluster_identifier"] = {
        "type": "str",
        "aliases": ["GlobalClusterIdentifier"],
    }
    argument_spec["db_cluster_identifier"] = {
        "type": "str",
        "aliases": ["DBClusterIdentifier"],
    }
    argument_spec["db_cluster_parameter_group_name"] = {
        "type": "str",
        "default": "default.aurora5.6",
        "aliases": ["DBClusterParameterGroupName"],
    }
    argument_spec["db_subnet_group_name"] = {
        "type": "str",
        "aliases": ["DBSubnetGroupName"],
    }
    argument_spec["deletion_protection"] = {
        "type": "bool",
        "aliases": ["DeletionProtection"],
    }
    argument_spec["domain"] = {"type": "str", "aliases": ["Domain"]}
    argument_spec["domain_iam_role_name"] = {
        "type": "str",
        "aliases": ["DomainIAMRoleName"],
    }
    argument_spec["enable_cloudwatch_logs_exports"] = {
        "type": "list",
        "elements": "str",
        "aliases": ["EnableCloudwatchLogsExports"],
    }
    argument_spec["enable_http_endpoint"] = {
        "type": "bool",
        "aliases": ["EnableHttpEndpoint"],
    }
    argument_spec["enable_iam_database_authentication"] = {
        "type": "bool",
        "aliases": ["EnableIAMDatabaseAuthentication"],
    }
    argument_spec["engine"] = {"type": "str", "aliases": ["Engine"]}
    argument_spec["engine_mode"] = {"type": "str", "aliases": ["EngineMode"]}
    argument_spec["engine_version"] = {"type": "str", "aliases": ["EngineVersion"]}
    argument_spec["manage_master_user_password"] = {
        "type": "bool",
        "aliases": ["ManageMasterUserPassword"],
    }
    argument_spec["iops"] = {"type": "int", "aliases": ["Iops"]}
    argument_spec["kms_key_id"] = {"type": "str", "aliases": ["KmsKeyId"]}
    argument_spec["master_username"] = {"type": "str", "aliases": ["MasterUsername"]}
    argument_spec["master_user_password"] = {
        "type": "str",
        "aliases": ["MasterUserPassword"],
    }
    argument_spec["monitoring_interval"] = {
        "type": "int",
        "default": 0,
        "aliases": ["MonitoringInterval"],
    }
    argument_spec["monitoring_role_arn"] = {
        "type": "str",
        "aliases": ["MonitoringRoleArn"],
    }
    argument_spec["network_type"] = {"type": "str", "aliases": ["NetworkType"]}
    argument_spec["performance_insights_enabled"] = {
        "type": "bool",
        "aliases": ["PerformanceInsightsEnabled"],
    }
    argument_spec["performance_insights_kms_key_id"] = {
        "type": "str",
        "aliases": ["PerformanceInsightsKmsKeyId"],
    }
    argument_spec["performance_insights_retention_period"] = {
        "type": "int",
        "aliases": ["PerformanceInsightsRetentionPeriod"],
    }
    argument_spec["port"] = {"type": "int", "aliases": ["Port"]}
    argument_spec["preferred_backup_window"] = {
        "type": "str",
        "aliases": ["PreferredBackupWindow"],
    }
    argument_spec["preferred_maintenance_window"] = {
        "type": "str",
        "aliases": ["PreferredMaintenanceWindow"],
    }
    argument_spec["publicly_accessible"] = {
        "type": "bool",
        "aliases": ["PubliclyAccessible"],
    }
    argument_spec["replication_source_identifier"] = {
        "type": "str",
        "aliases": ["ReplicationSourceIdentifier"],
    }
    argument_spec["restore_to_time"] = {"type": "str", "aliases": ["RestoreToTime"]}
    argument_spec["restore_type"] = {
        "type": "str",
        "default": "full-copy",
        "aliases": ["RestoreType"],
    }
    argument_spec["serverless_v2_scaling_configuration"] = {
        "type": "dict",
        "options": {
            "min_capacity": {"type": "int", "aliases": ["MinCapacity"]},
            "max_capacity": {"type": "int", "aliases": ["MaxCapacity"]},
        },
        "aliases": ["ServerlessV2ScalingConfiguration"],
    }
    argument_spec["scaling_configuration"] = {
        "type": "dict",
        "options": {
            "auto_pause": {"type": "bool", "aliases": ["AutoPause"]},
            "max_capacity": {"type": "int", "aliases": ["MaxCapacity"]},
            "min_capacity": {"type": "int", "aliases": ["MinCapacity"]},
            "seconds_before_timeout": {
                "type": "int",
                "aliases": ["SecondsBeforeTimeout"],
            },
            "seconds_until_auto_pause": {
                "type": "int",
                "aliases": ["SecondsUntilAutoPause"],
            },
            "timeout_action": {"type": "str", "aliases": ["TimeoutAction"]},
        },
        "aliases": ["ScalingConfiguration"],
    }
    argument_spec["snapshot_identifier"] = {
        "type": "str",
        "aliases": ["SnapshotIdentifier"],
    }
    argument_spec["source_db_cluster_identifier"] = {
        "type": "str",
        "aliases": ["SourceDBClusterIdentifier"],
    }
    argument_spec["source_region"] = {"type": "str", "aliases": ["SourceRegion"]}
    argument_spec["storage_encrypted"] = {
        "type": "bool",
        "aliases": ["StorageEncrypted"],
    }
    argument_spec["storage_type"] = {"type": "str", "aliases": ["StorageType"]}
    argument_spec["tags"] = {"type": "dict", "aliases": ["Tags", "resource_tags"]}
    argument_spec["use_latest_restorable_time"] = {
        "type": "bool",
        "aliases": ["UseLatestRestorableTime"],
    }
    argument_spec["vpc_security_group_ids"] = {
        "type": "list",
        "elements": "str",
        "aliases": ["VpcSecurityGroupIds"],
    }
    argument_spec["state"] = {
        "type": "str",
        "choices": ["present", "absent", "list", "describe", "get"],
        "default": "present",
    }
    argument_spec["wait"] = {"type": "bool", "default": False}
    argument_spec["wait_timeout"] = {"type": "int", "default": 320}
    argument_spec["force"] = {"type": "bool", "default": False}
    argument_spec["purge_tags"] = {"type": "bool", "default": True}

    required_if = [
        ["state", "present", ["db_cluster_identifier"], True],
        ["state", "absent", ["db_cluster_identifier"], True],
        ["state", "get", ["db_cluster_identifier"], True],
    ]
    mutually_exclusive = []

    module = AnsibleAmazonCloudModule(
        argument_spec=argument_spec,
        required_if=required_if,
        mutually_exclusive=mutually_exclusive,
        supports_check_mode=True,
    )
    cloud = CloudControlResource(module)

    type_name = "AWS::RDS::DBCluster"

    params = {}

    params["allocated_storage"] = module.params.get("allocated_storage")
    params["associated_roles"] = module.params.get("associated_roles")
    params["auto_minor_version_upgrade"] = module.params.get(
        "auto_minor_version_upgrade"
    )
    params["availability_zones"] = module.params.get("availability_zones")
    params["backtrack_window"] = module.params.get("backtrack_window")
    params["backup_retention_period"] = module.params.get("backup_retention_period")
    params["copy_tags_to_snapshot"] = module.params.get("copy_tags_to_snapshot")
    params["database_name"] = module.params.get("database_name")
    params["db_cluster_identifier"] = module.params.get("db_cluster_identifier")
    params["db_cluster_instance_class"] = module.params.get("db_cluster_instance_class")
    params["db_cluster_parameter_group_name"] = module.params.get(
        "db_cluster_parameter_group_name"
    )
    params["db_instance_parameter_group_name"] = module.params.get(
        "db_instance_parameter_group_name"
    )
    params["db_subnet_group_name"] = module.params.get("db_subnet_group_name")
    params["db_system_id"] = module.params.get("db_system_id")
    params["deletion_protection"] = module.params.get("deletion_protection")
    params["domain"] = module.params.get("domain")
    params["domain_iam_role_name"] = module.params.get("domain_iam_role_name")
    params["enable_cloudwatch_logs_exports"] = module.params.get(
        "enable_cloudwatch_logs_exports"
    )
    params["enable_http_endpoint"] = module.params.get("enable_http_endpoint")
    params["enable_iam_database_authentication"] = module.params.get(
        "enable_iam_database_authentication"
    )
    params["engine"] = module.params.get("engine")
    params["engine_mode"] = module.params.get("engine_mode")
    params["engine_version"] = module.params.get("engine_version")
    params["global_cluster_identifier"] = module.params.get("global_cluster_identifier")
    params["iops"] = module.params.get("iops")
    params["kms_key_id"] = module.params.get("kms_key_id")
    params["manage_master_user_password"] = module.params.get(
        "manage_master_user_password"
    )
    params["master_user_password"] = module.params.get("master_user_password")
    params["master_username"] = module.params.get("master_username")
    params["monitoring_interval"] = module.params.get("monitoring_interval")
    params["monitoring_role_arn"] = module.params.get("monitoring_role_arn")
    params["network_type"] = module.params.get("network_type")
    params["performance_insights_enabled"] = module.params.get(
        "performance_insights_enabled"
    )
    params["performance_insights_kms_key_id"] = module.params.get(
        "performance_insights_kms_key_id"
    )
    params["performance_insights_retention_period"] = module.params.get(
        "performance_insights_retention_period"
    )
    params["port"] = module.params.get("port")
    params["preferred_backup_window"] = module.params.get("preferred_backup_window")
    params["preferred_maintenance_window"] = module.params.get(
        "preferred_maintenance_window"
    )
    params["publicly_accessible"] = module.params.get("publicly_accessible")
    params["replication_source_identifier"] = module.params.get(
        "replication_source_identifier"
    )
    params["restore_to_time"] = module.params.get("restore_to_time")
    params["restore_type"] = module.params.get("restore_type")
    params["scaling_configuration"] = module.params.get("scaling_configuration")
    params["serverless_v2_scaling_configuration"] = module.params.get(
        "serverless_v2_scaling_configuration"
    )
    params["snapshot_identifier"] = module.params.get("snapshot_identifier")
    params["source_db_cluster_identifier"] = module.params.get(
        "source_db_cluster_identifier"
    )
    params["source_region"] = module.params.get("source_region")
    params["storage_encrypted"] = module.params.get("storage_encrypted")
    params["storage_type"] = module.params.get("storage_type")
    params["tags"] = module.params.get("tags")
    params["use_latest_restorable_time"] = module.params.get(
        "use_latest_restorable_time"
    )
    params["vpc_security_group_ids"] = module.params.get("vpc_security_group_ids")

    # The DesiredState we pass to AWS must be a JSONArray of non-null values
    _params_to_set = scrub_none_parameters(params)

    # Only if resource is taggable
    if module.params.get("tags") is not None:
        _params_to_set["tags"] = ansible_dict_to_boto3_tag_list(module.params["tags"])

    # Use the alias from argument_spec as key and avoid snake_to_camel conversions
    params_to_set = map_key_to_alias(_params_to_set, argument_spec)

    # Ignore createOnlyProperties that can be set only during resource creation
    create_only_params = [
        "/properties/AvailabilityZones",
        "/properties/DBClusterIdentifier",
        "/properties/DBSubnetGroupName",
        "/properties/DBSystemId",
        "/properties/DatabaseName",
        "/properties/EngineMode",
        "/properties/KmsKeyId",
        "/properties/PubliclyAccessible",
        "/properties/RestoreToTime",
        "/properties/RestoreType",
        "/properties/SnapshotIdentifier",
        "/properties/SourceDBClusterIdentifier",
        "/properties/SourceRegion",
        "/properties/StorageEncrypted",
        "/properties/UseLatestRestorableTime",
    ]

    # Necessary to handle when module does not support all the states
    handlers = ["create", "read", "update", "delete", "list"]

    state = module.params.get("state")
    identifier = ["/properties/DBClusterIdentifier"]

    results = {"changed": False, "result": {}}

    if state == "list":
        if "list" not in handlers:
            module.exit_json(
                **results, msg=f"Resource type {type_name} cannot be listed."
            )
        results["result"] = cloud.list_resources(type_name, identifier)

    if state in ("describe", "get"):
        if "read" not in handlers:
            module.exit_json(
                **results, msg=f"Resource type {type_name} cannot be read."
            )
        results["result"] = cloud.get_resource(type_name, identifier)

    if state == "present":
        results = cloud.present(
            type_name, identifier, params_to_set, create_only_params
        )

    if state == "absent":
        results["changed"] |= cloud.absent(type_name, identifier)

    module.exit_json(**results)


if __name__ == "__main__":
    main()
