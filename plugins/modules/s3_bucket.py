#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright: (c) 2022, Ansible Project
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# template: header.j2
# This module is autogenerated by amazon_cloud_code_generator.
# See: https://github.com/ansible-collections/amazon_cloud_code_generator
from __future__ import absolute_import, division, print_function
__metaclass__ = type


DOCUMENTATION = r"""
"""

EXAMPLES = r"""
"""

RETURN = r"""
"""

# template: default_module.j2

import json
import os
import time

try:
    import botocore
except ImportError:
    pass  # Handled by AnsibleAWSModule


from ansible_collections.amazon.aws.plugins.module_utils.core import AnsibleAWSModule
from ansible_collections.amazon.cloud.plugins.module_utils.core import CloudControlResource
from ansible_collections.amazon.aws.plugins.module_utils.ec2 import snake_dict_to_camel_dict


import logging

logging.basicConfig(filename='/Users/alinabuzachis/dev/example.log', level=logging.DEBUG)

logger = logging.getLogger("test")
logger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - " "%(message)s")
ch.setFormatter(formatter)
logger.addHandler(ch)


def main():
    argument_spec = dict(
        role_arn=dict(type='str'),
        client_token=dict(type='str', no_log=True),
        state=dict(type='str',
                choices=['create', 'update', 'delete', 'list', 'describe'],
                default='create'),
        accelerate_configuration=dict(type='str', required=False),
        access_control=dict(type='str', required=False),
        analytics_configurations=dict(type='str', required=False),
        bucket_encryption=dict(type='str', required=False),
        bucket_name=dict(type='str', required=False),
        cors_configuration=dict(type='str', required=False),
        intelligent_tiering_configurations=dict(type='str', required=False),
        inventory_configurations=dict(type='str', required=False),
        lifecycle_configuration=dict(type='str', required=False),
        logging_configuration=dict(type='str', required=False),
        metrics_configurations=dict(type='str', required=False),
        notification_configuration=dict(type='str', required=False),
        object_lock_configuration=dict(type='str', required=False),
        object_lock_enabled=dict(type='str', required=False),
        ownership_controls=dict(type='str', required=False),
        public_access_block_configuration=dict(type='dict', required=False),
        replication_configuration=dict(type='str', required=False),
        tags=dict(type='str', required=False),
        versioning_configuration=dict(type='str', required=False),
        website_configuration=dict(type='str', required=False),
        arn=dict(type='str', required=False),
        domain_name=dict(type='str', required=False),
        dual_stack_domain_name=dict(type='str', required=False),
        regional_domain_name=dict(type='str', required=False),
        website_url=dict(type='str', required=False),
    )

    module = AnsibleAWSModule(argument_spec=argument_spec,
                            supports_check_mode=False)

    cloud = CloudControlResource(module)

    type_name = 'AWS::S3::Bucket'

    params = dict()
    params['AccelerateConfiguration'] = module.params.get(
        'accelerate_configuration')
    params['AccessControl'] = module.params.get('access_control')
    params['AnalyticsConfigurations'] = module.params.get(
        'analytics_configurations')
    params['BucketEncryption'] = module.params.get('bucket_encryption')
    params['BucketName'] = module.params.get('bucket_name')
    params['CorsConfiguration'] = module.params.get('cors_configuration')
    params['IntelligentTieringConfigurations'] = module.params.get(
        'intelligent_tiering_configurations')
    params['InventoryConfigurations'] = module.params.get(
        'inventory_configurations')
    params['LifecycleConfiguration'] = module.params.get(
        'lifecycle_configuration')
    params['LoggingConfiguration'] = module.params.get('logging_configuration')
    params['MetricsConfigurations'] = module.params.get(
        'metrics_configurations')
    params['NotificationConfiguration'] = module.params.get(
        'notification_configuration')
    params['ObjectLockConfiguration'] = module.params.get(
            'object_lock_configuration')
    params['ObjectLockEnabled'] = module.params.get('object_lock_enabled')
    params['OwnershipControls'] = module.params.get('ownership_controls')
    # params['PublicAccessBlockConfiguration'] = module.params.get(
    #     'public_access_block_configuration')

    if module.params.get('public_access_block_configuration'):  # BlockPublicAcls, BlockPublicPolicy, IgnorePublicAcls, RestrictPublicBuckets, 
        params['PublicAccessBlockConfiguration'] = snake_dict_to_camel_dict(module.params.get('public_access_block_configuration'), capitalize_first=True)

    params['ReplicationConfiguration'] = module.params.get(
        'replication_configuration')
    params['Tags'] = module.params.get('tags')
    params['VersioningConfiguration'] = module.params.get(
        'versioning_configuration')
    params['WebsiteConfiguration'] = module.params.get('website_configuration')
    params['Arn'] = module.params.get('arn')
    params['DomainName'] = module.params.get('domain_name')
    params['DualStackDomainName'] = module.params.get('dual_stack_domain_name')
    params['RegionalDomainName'] = module.params.get('regional_domain_name')
    params['WebsiteURL'] = module.params.get('website_url')

    state = module.params.get('state')

    # The DesiredState we pass to AWS must be a JSONArray of non-null values
    params_to_set = {k: v for k, v in params.items() if v is not None}
    desired_state = json.dumps(params_to_set)

    identifier = params['BucketName']# identifier of the resource

    if state == 'list':
        result = cloud.list_resources(type_name)

    if state == 'create':
        result = cloud.create_resource(type_name, identifier, desired_state)            

    if state == 'update':
      result = cloud.update_resource(type_name, identifier, params_to_set)
      
    if state == 'delete':
      result = cloud.delete_resource(type_name, identifier)

    module.exit_json(**result)


if __name__ == '__main__':
    main()